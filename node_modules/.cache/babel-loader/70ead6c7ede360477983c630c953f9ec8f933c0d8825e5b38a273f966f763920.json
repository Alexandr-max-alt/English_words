{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALEX\\\\Desktop\\\\test\\\\src\\\\Components\\\\Card\\\\Card.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport './style-card.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Card = ({\n  saveToLocal,\n  allCards,\n  setListMemorization,\n  stepMix,\n  setStepMix,\n  getRandom,\n  setRandomIndex,\n  randomIndex,\n  cards,\n  setCards,\n  setFinish,\n  setMemorized,\n  memorized,\n  setShowMemory,\n  showMemory\n}) => {\n  _s();\n  const [showResult, setShowResult] = React.useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = React.useState(false);\n  function checkSteps(Cards) {\n    if (stepMix > 3) {\n      setShowMemory(true);\n      setRandomIndex(getRandom(memorized));\n      setStepMix(0);\n    } else {\n      setRandomIndex(getRandom(Cards));\n      setShowMemory(false);\n    }\n    ;\n  }\n  function handleShowNextCard(id) {\n    setStepMix(++stepMix);\n    setMemorized(memorized => {\n      const updateCards = [...memorized, cards.filter(obj => obj.id === id)].flat();\n      saveToLocal(updateCards, 'memorized');\n      return updateCards;\n    });\n    setCards(cards => {\n      const updateCards = cards.filter(obj => obj.id !== id);\n      updateCards.length > 0 ? checkSteps(updateCards) : setFinish(true);\n      saveToLocal(updateCards, 'cards');\n      return updateCards;\n    });\n  }\n  function handleShowResult(id) {\n    setShowResult(true);\n    setIsButtonDisabled(true);\n    setTimeout(() => {\n      setShowResult(false);\n      setIsButtonDisabled(false);\n      setListMemorization(list => {\n        const updateList = [...new Set([...list, allCards.filter(obj => obj.id === id)].flat())];\n        saveToLocal(updateList, 'cardsForMemory');\n        return updateList;\n      });\n      setMemorized(memorizedCards => {\n        const updateCards = memorizedCards.filter(obj => obj.id !== id);\n        saveToLocal(updateCards, 'memorized');\n        return updateCards;\n      });\n      setShowMemory(false);\n      const newIndex = getRandom(cards);\n      setRandomIndex(newIndex);\n    }, 5000);\n  }\n  const card = cards[randomIndex];\n  const memoriedCard = memorized[randomIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(Card, \"EGLjXOEahIHv9VhbMaGMwn16Wrk=\");\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Card","saveToLocal","allCards","setListMemorization","stepMix","setStepMix","getRandom","setRandomIndex","randomIndex","cards","setCards","setFinish","setMemorized","memorized","setShowMemory","showMemory","_s","showResult","setShowResult","useState","isButtonDisabled","setIsButtonDisabled","checkSteps","Cards","handleShowNextCard","id","updateCards","filter","obj","flat","length","handleShowResult","setTimeout","list","updateList","Set","memorizedCards","newIndex","card","memoriedCard","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ALEX/Desktop/test/src/Components/Card/Card.jsx"],"sourcesContent":["import React from \"react\";\r\nimport './style-card.css';\r\n\r\nexport const Card = ({ saveToLocal, allCards, setListMemorization, stepMix, setStepMix, getRandom, setRandomIndex, randomIndex, cards, setCards, setFinish , setMemorized, memorized, setShowMemory, showMemory}) => {\r\n    const [showResult, setShowResult] = React.useState(false);\r\n    const [isButtonDisabled, setIsButtonDisabled] = React.useState(false);\r\n\r\n    function checkSteps(Cards) {\r\n        if (stepMix > 3) {\r\n            setShowMemory(true);\r\n            setRandomIndex(getRandom(memorized));\r\n\r\n            setStepMix(0);\r\n        } else {\r\n            setRandomIndex(getRandom(Cards));\r\n            setShowMemory(false);\r\n        };\r\n    }\r\n\r\n    function handleShowNextCard(id) { \r\n        setStepMix(++stepMix);\r\n\r\n        setMemorized(memorized => {\r\n            const updateCards = [...memorized, cards.filter(obj => obj.id === id)].flat();\r\n\r\n            saveToLocal(updateCards, 'memorized');\r\n            return updateCards;\r\n        });\r\n\r\n        setCards(cards => {\r\n            const updateCards = cards.filter(obj => obj.id !== id);\r\n            updateCards.length > 0 ? checkSteps(updateCards) : setFinish(true);\r\n\r\n            saveToLocal(updateCards, 'cards')\r\n            return updateCards;\r\n        });\r\n    }\r\n\r\n    function handleShowResult(id) {\r\n        setShowResult(true);\r\n        setIsButtonDisabled(true);\r\n\r\n        setTimeout(() => {\r\n            setShowResult(false);\r\n            setIsButtonDisabled(false);\r\n\r\n                    setListMemorization(list => {\r\n                        const updateList = [...new Set([...list, allCards.filter(obj => obj.id === id)].flat())];\r\n                        \r\n                        saveToLocal(updateList, 'cardsForMemory');\r\n                        return updateList;\r\n                    });\r\n\r\n                    setMemorized(memorizedCards => {\r\n                        const updateCards = memorizedCards.filter(obj => obj.id !== id);\r\n\r\n                        saveToLocal(updateCards, 'memorized');\r\n                        return updateCards;\r\n                    });\r\n                    setShowMemory(false);\r\n\r\n                    const newIndex = getRandom(cards);\r\n                    setRandomIndex(newIndex);\r\n\r\n        }, 5000);\r\n    }\r\n\r\n    const card = cards[randomIndex];\r\n    const memoriedCard = memorized[randomIndex];\r\n\r\n    return (\r\n        <div >\r\n            {/* <h1 class=\"card-name\">{showMemory? memoriedCard?.name : card.name}</h1>\r\n            <h1 class={`card-translation ${showResult && 'show-answer'}`}>{showMemory? memoriedCard?.translation : card.translation}</h1>\r\n            <div class=\"card-buttons\">\r\n                <button\r\n                    onClick={() => handleShowNextCard(showMemory? memoriedCard?.id : card.id)}\r\n                    class=\"card-button-yes\"\r\n                    disabled={isButtonDisabled}\r\n                >I know\r\n                </button>\r\n                <button\r\n                    onClick={() => handleShowResult(showMemory ? memoriedCard?.id : card.id)}\r\n                    class=\"card-button-no\"\r\n                    disabled={isButtonDisabled}\r\n                >Don't know\r\n                </button>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}